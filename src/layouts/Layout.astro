---
import ScrollToTop from '../components/ScrollToTop.astro';
import Chatbot from '../components/Chatbot.astro';

interface Props {
	title?: string;
	description?: string;
	image?: string;
	canonical?: string;
	type?: string;
	keywords?: string;
	author?: string;
}

const {
	title = "Ramón Gracia - Desarrollador Web & Arquitecto de Software",
	description = "Portfolio profesional de Ramón Gracia, desarrollador de software con experiencia en Vue.js, Angular, React, .NET y desarrollo web full-stack",
	image = "/images/ramon-gracia-preview.jpg",
	canonical = Astro.url.href,
	type = "website",
	keywords = "desarrollador web, desarrollador software, frontend, backend, vue.js, angular, react, .NET, javascript, typescript, full-stack, Ramón Gracia, portfolio",
	author = "Ramón Gracia"
} = Astro.props;

// Obtener la URL actual para el canonical
const currentUrl = Astro.url.href;
---

<!doctype html>
<html lang="es" class="light">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="canonical" href={canonical} />
		<link rel="manifest" href="/manifest.json" />
		<meta name="theme-color" content="#3b82f6" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		<link rel="apple-touch-icon" href="/favicon.svg" />
		<link rel="author" href="/humans.txt" />

		<!-- Metadatos primarios -->
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="keywords" content={keywords} />
		<meta name="author" content={author} />
		<meta name="generator" content={Astro.generator} />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content={type} />
		<meta property="og:url" content={currentUrl} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL(image, currentUrl)} />
		<meta property="og:site_name" content="Portfolio de Ramón Gracia" />
		<meta property="og:locale" content="es_ES" />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={currentUrl} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={new URL(image, currentUrl)} />

		<!-- Fuentes y estilos -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"></noscript>

		<!-- Fuente crítica para el LCP -->
		<style>
			/* Fuente crítica para el LCP */
			@font-face {
				font-family: 'Inter';
				font-style: normal;
				font-weight: 600;
				font-display: swap;
				src: local('Inter SemiBold'), local('Inter-SemiBold'), url(https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7.woff2) format('woff2');
				unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
			}
		</style>
		<!-- Estilos críticos para el LCP -->
		<link rel="preload" href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css"></noscript>

		<link rel="preload" href="/css/responsive.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="/css/responsive.css"></noscript>

		<!-- Precargar imágenes críticas para el LCP -->
		<link rel="preload" href="/images/responsive/avatar-large.webp" as="image" type="image/webp" fetchpriority="high">

		<!-- Precargar fuentes críticas para el LCP -->
		<link rel="preload" href="https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7.woff2" as="font" type="font/woff2" crossorigin>

		<!-- Estilos críticos inline para el LCP -->
		<style>
			/* Estilos críticos para el título principal */
			.hero-title {
				display: block;
				font-weight: 600;
				color: #2563eb; /* --primary-color */
				font-size: 2rem;
				margin-bottom: 1rem;
				min-height: 2.5rem;
				font-family: 'Inter', sans-serif;
			}

			/* Ocultar el elemento typewriter inicialmente */
			.typewriter-hidden {
				display: none;
				height: 0;
				overflow: hidden;
				opacity: 0;
				position: absolute;
				pointer-events: none;
			}

			/* Optimizaciones para el modo oscuro */
			html.dark .hero-title {
				color: #60a5fa; /* --primary-color en modo oscuro */
			}
		</style>

		<!-- Script para cargar estilos de forma asíncrona -->
		<script>
			// Función para cargar estilos de forma asíncrona
			/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */
			(function(w){
				"use strict";
				// Asegurarse de que w sea un objeto válido
				w = w || window || {};

				/* exported loadCSS */
				var loadCSS = function( href, before, media, attributes ){
					// Arguments explained:
					// `href` [REQUIRED] is the URL for your CSS file
					// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before
					// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.
					// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'
					// `attributes` [OPTIONAL] is the Object of attribute name/attribute value pairs to set on the stylesheet's DOM Element.
					var doc = w.document;
					var ss = doc.createElement( "link" );
					var ref;
					if( before ){
						ref = before;
					}
					else {
						var refs = ( doc.body || doc.getElementsByTagName( "head" )[ 0 ] ).childNodes;
						ref = refs[ refs.length - 1 ];
					}

					var sheets = doc.styleSheets;
					ss.rel = "stylesheet";
					ss.href = href;
					// temporarily set media to something inapplicable to ensure it'll fetch without blocking render
					ss.media = "only x";

					// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.
					function ready( cb ){
						if( doc.body ){
							return cb();
						}
						setTimeout(function(){
							ready( cb );
						});
					}
					// Inject link
					// Note: the ternary preserves the existing behavior of "before" argument, but we could choose to change the argument to "after" in a later release and standardize on ref.nextSibling for all refs
					// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/
					ready( function(){
						ref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );
					});
					// A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.
					var onloadcssdefined = function( cb ){
						var resolvedHref = ss.href;
						var i = sheets.length;
						while( i-- ){
							if( sheets[ i ].href === resolvedHref ){
								return cb();
							}
						}
						setTimeout(function() {
							onloadcssdefined( cb );
						});
					};

					function loadCB(){
						if( ss.addEventListener ){
							ss.removeEventListener( "load", loadCB );
						}
						ss.media = media || "all";
					}

					// once loaded, set link's media back to `all` so that the stylesheet applies once it loads
					if( ss.addEventListener ){
						ss.addEventListener( "load", loadCB);
					}
					ss.onloadcssdefined = onloadcssdefined;
					onloadcssdefined( loadCB );
					return ss;
				};
				// commonjs
				if( typeof exports !== "undefined" ){
					exports.loadCSS = loadCSS;
				}
				else if (w) {
					// Asegurarse de que w exista antes de asignarle propiedades
					w.loadCSS = loadCSS;
				}
			}( typeof global !== "undefined" ? global : (typeof window !== "undefined" ? window : this) ));

			/*! loadCSS rel=preload polyfill. [c]2017 Filament Group, Inc. MIT License */
			(function( w ){
				// Asegurarse de que w sea un objeto válido
				w = w || window || {};

				// rel=preload support test
				if( !w.loadCSS ){
					return;
				}
				var rp = loadCSS.relpreload = {};
				rp.support = function(){
					var ret;
					try {
						ret = w.document.createElement( "link" ).relList.supports( "preload" );
					} catch (e) {
						ret = false;
					}
					return function(){
						return ret;
					};
				}();

				// if preload isn't supported, get an asynchronous load by using a non-matching media attribute
				// then change that media back to its intended value on load
				rp.bindMediaToggle = function( link ){
					// remember existing media attr for ultimate state, or default to 'all'
					var finalMedia = link.media || "all";

					function enableStylesheet(){
						// unbind listeners
						if( link.addEventListener ){
							link.removeEventListener( "load", enableStylesheet );
						} else if( link.attachEvent ){
							link.detachEvent( "onload", enableStylesheet );
						}
						link.setAttribute( "onload", null );
						link.media = finalMedia;
					}

					// bind load handlers to enable media
					if( link.addEventListener ){
						link.addEventListener( "load", enableStylesheet );
					} else if( link.attachEvent ){
						link.attachEvent( "onload", enableStylesheet );
					}

					// Set rel and non-applicable media type to start an async request
					// note: timeout allows this to happen async to let rendering continue in IE
					setTimeout(function(){
						link.rel = "stylesheet";
						link.media = "only x";
					});
					// also enable media after 3 seconds,
					// which will catch very old browsers (android 2.x, old firefox) that don't support onload on link
					setTimeout( enableStylesheet, 3000 );
				};

				// loop through link elements in DOM
				rp.poly = function(){
					// double check this to prevent external calls from running
					if( rp.support() ){
						return;
					}
					var links = w.document.getElementsByTagName( "link" );
					for( var i = 0; i < links.length; i++ ){
						var link = links[ i ];
						// qualify links to those with rel=preload and as=style attrs
						if( link.rel === "preload" && link.getAttribute( "as" ) === "style" && !link.getAttribute( "data-loadcss" ) ){
							// prevent rerunning on link
							link.setAttribute( "data-loadcss", true );
							// bind listeners to toggle media back
							rp.bindMediaToggle( link );
						}
					}
				};

				// if unsupported, run the polyfill
				if( !rp.support() ){
					// run once at least
					rp.poly();

					// rerun poly on an interval until onload
					var run = w.setInterval( rp.poly, 500 );
					if( w.addEventListener ){
						w.addEventListener( "load", function(){
							rp.poly();
							w.clearInterval( run );
						} );
					} else if( w.attachEvent ){
						w.attachEvent( "onload", function(){
							rp.poly();
							w.clearInterval( run );
						} );
					}
				}
			}( typeof global !== "undefined" ? global : (typeof window !== "undefined" ? window : this) ));
		</script>

		<!-- Structured Data / JSON-LD -->
		<script is:inline type="application/ld+json">
		{
			"@context": "https://schema.org",
			"@type": "Person",
			"name": "Ramón Gracia",
			"url": "https://ramongracia.com",
			"image": "/images/ramon-gracia-preview.jpg",
			"jobTitle": "Desarrollador Web & Arquitecto de Software",
			"worksFor": {
				"@type": "Organization",
				"name": "Go1 Technologies (PriceTravel)"
			},
			"sameAs": [
				"https://www.linkedin.com/in/ramongracia/"
			],
			"description": "Desarrollador de software con experiencia en Vue.js, Angular, React, .NET y desarrollo web full-stack"
		}
		</script>
	</head>
	<body>
		<div id="particles-js"></div>
		<slot />
		<ScrollToTop />
		<Chatbot />

		<!-- Cargar scripts no críticos de forma asíncrona -->
		<script is:inline defer src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>
		<script is:inline defer src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
		<script is:inline defer src="/scripts/simpleNavigation.js"></script>
		<script is:inline>
			// Función para alternar entre modo claro y oscuro
			function toggleDarkMode() {
				const html = document.documentElement;
				if (html.classList.contains('dark')) {
					html.classList.remove('dark');
					html.classList.add('light');
					localStorage.setItem('theme', 'light');
					const darkModeToggles = document.querySelectorAll('.dark-mode-toggle');
					darkModeToggles.forEach(toggle => {
						toggle.setAttribute('aria-label', 'Activar modo oscuro');
						toggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>';
					});
				} else {
					html.classList.add('dark');
					html.classList.remove('light');
					localStorage.setItem('theme', 'dark');
					const darkModeToggles = document.querySelectorAll('.dark-mode-toggle');
					darkModeToggles.forEach(toggle => {
						toggle.setAttribute('aria-label', 'Activar modo claro');
						toggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>';
					});
				}
			}

			// Inicializar el tema según la preferencia guardada o la preferencia del sistema
			function initTheme() {
				const savedTheme = localStorage.getItem('theme');
				const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

				if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
					document.documentElement.classList.add('dark');
					document.documentElement.classList.remove('light');
					const darkModeToggles = document.querySelectorAll('.dark-mode-toggle');
					darkModeToggles.forEach(toggle => {
						toggle.setAttribute('aria-label', 'Activar modo claro');
						toggle.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>';
					});
				}
			}

			// Esperar a que el DOM esté completamente cargado
			window.addEventListener('load', function() {
				initTheme();

				// Añadir event listeners a los botones de cambio de tema
				const darkModeToggles = document.querySelectorAll('.dark-mode-toggle');
				darkModeToggles.forEach(toggle => {
					toggle.addEventListener('click', toggleDarkMode);
				});

				// Inicializar AOS solo si está disponible
				if (typeof window !== 'undefined' && window.AOS) {
					window.AOS.init({
						duration: 800,
						easing: 'ease-in-out',
						once: false
					});
				}

				// Inicializar Particles.js solo si está disponible
				if (typeof window !== 'undefined' && window.particlesJS && document.getElementById('particles-js')) {
					window.particlesJS('particles-js', {
						particles: {
							number: {
								value: 50,
								density: {
									enable: true,
									value_area: 800
								}
							},
							color: {
								value: '#3b82f6'
							},
							shape: {
								type: ['circle', 'triangle', 'edge'],
								stroke: {
									width: 0,
									color: '#000000'
								},
							},
							opacity: {
								value: 0.2,
								random: true,
								anim: {
									enable: true,
									speed: 1,
									opacity_min: 0.1,
									sync: false
								}
							},
							size: {
								value: 3,
								random: true,
								anim: {
									enable: true,
									speed: 2,
									size_min: 0.3,
									sync: false
								}
							},
							line_linked: {
								enable: true,
								distance: 150,
								color: '#3b82f6',
								opacity: 0.2,
								width: 1
							},
							move: {
								enable: true,
								speed: 2,
								direction: 'none',
								random: true,
								straight: false,
								out_mode: 'out',
								bounce: false,
							}
						},
						interactivity: {
							detect_on: 'canvas',
							events: {
								onhover: {
									enable: true,
									mode: 'grab'
								},
								onclick: {
									enable: true,
									mode: 'push'
								},
								resize: true
							},
							modes: {
								grab: {
									distance: 140,
									line_linked: {
										opacity: 1
									}
								},
								push: {
									particles_nb: 4
								}
							}
						},
						retina_detect: true
					});
				}
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--primary-color: #2563eb; /* Azul más oscuro para mejor contraste */
		--secondary-color: #1e40af;
		--accent-color: #3b82f6;
		--text-color: #111827; /* Texto más oscuro */
		--light-text-color: #4b5563; /* Texto gris más oscuro */
		--background-color: #ffffff;
		--light-background: #f3f4f6;
		--border-color: #e5e7eb;
		--card-background: #ffffff;
		--header-background: rgba(255, 255, 255, 0.95);
		--shadow-color: rgba(0, 0, 0, 0.1);
		--comment-color: #374151; /* Color para comentarios con mejor contraste */
	}

	html.dark {
		--primary-color: #60a5fa;
		--secondary-color: #3b82f6;
		--accent-color: #93c5fd;
		--text-color: #f3f4f6; /* Texto más claro para mejor contraste */
		--light-text-color: #d1d5db; /* Texto gris más claro */
		--background-color: #111827;
		--light-background: #1f2937;
		--border-color: #374151;
		--card-background: #1f2937;
		--header-background: rgba(17, 24, 39, 0.95);
		--shadow-color: rgba(0, 0, 0, 0.3);
		--comment-color: #9ca3af; /* Color para comentarios con mejor contraste */
	}

	* {
		box-sizing: border-box;
		margin: 0;
		padding: 0;
	}

	html {
		font-family: 'Inter', sans-serif;
		scroll-behavior: smooth;
	}

	body {
		margin: 0;
		padding: 0;
		width: 100%;
		color: var(--text-color);
		background-color: var(--background-color);
		line-height: 1.6;
		overflow-x: hidden;
		position: relative;
	}

	#particles-js {
		position: fixed;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		z-index: -1;
		pointer-events: none;
	}

	a {
		color: var(--primary-color);
		text-decoration: none;
		transition: color 0.3s ease;
	}

	a:hover {
		color: var(--secondary-color);
	}

	h1, h2, h3, h4, h5, h6 {
		margin: 0 0 1rem 0;
		line-height: 1.2;
	}

	img {
		max-width: 100%;
		height: auto;
	}

	.container {
		width: 100%;
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1.5rem;
		position: relative;
		z-index: 1;
	}

	.section {
		padding: 5rem 0;
		position: relative;
	}

	.btn {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		background-color: var(--primary-color);
		color: white;
		border-radius: 0.375rem;
		font-weight: 600; /* Texto más grueso para mejor contraste */
		text-align: center;
		cursor: pointer;
		transition: all 0.3s ease;
		position: relative;
		overflow: hidden;
		z-index: 1;
		text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2); /* Sombra de texto para mejorar legibilidad */
	}

	.btn:before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		width: 0%;
		height: 100%;
		background-color: var(--secondary-color);
		transition: width 0.3s ease;
		z-index: -1;
	}

	.btn:hover:before {
		width: 100%;
	}

	.btn:hover {
		color: white;
		transform: translateY(-3px);
		box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
	}

	html.dark .btn:hover {
		box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
	}

	.btn-outline {
		background-color: transparent;
		border: 2px solid var(--primary-color); /* Borde más grueso */
		color: var(--primary-color);
		text-shadow: none; /* Sin sombra de texto para el outline */
	}

	.btn-outline:before {
		background-color: var(--primary-color);
	}

	.btn-outline:hover {
		color: white;
	}

	html.dark .btn-outline {
		color: var(--primary-color);
		border-color: var(--primary-color);
	}

	html.dark .btn-outline:hover {
		color: var(--background-color);
		background-color: var(--primary-color);
		border-color: var(--primary-color);
	}

	/* Clases para animaciones */
	.fade-up {
		opacity: 0;
		transform: translateY(20px);
		transition: opacity 0.5s ease, transform 0.5s ease;
	}

	.fade-up.active {
		opacity: 1;
		transform: translateY(0);
	}

	.typing-effect {
		border-right: 3px solid var(--primary-color);
		white-space: nowrap;
		overflow: hidden;
		animation: typing 3.5s steps(30, end), blink-caret 0.75s step-end infinite;
	}

	@keyframes typing {
		from { width: 0 }
		to { width: 100% }
	}

	@keyframes blink-caret {
		from, to { border-color: transparent }
		50% { border-color: var(--primary-color) }
	}

	/* Efecto de resaltado de texto */
	.highlight-text {
		position: relative;
		display: inline-block;
	}

	.highlight-text::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 30%;
		background-color: rgba(59, 130, 246, 0.2);
		z-index: -1;
		transition: height 0.3s ease;
	}

	html.dark .highlight-text::after {
		background-color: rgba(96, 165, 250, 0.2);
	}

	.highlight-text:hover::after {
		height: 100%;
	}

	@media (max-width: 768px) {
		.section {
			padding: 3rem 0;
		}
	}
</style>
