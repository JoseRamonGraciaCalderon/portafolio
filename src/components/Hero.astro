---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import OptimizedImage from './OptimizedImage.astro';

// Obtener el idioma actual y las traducciones
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<section class="hero">
  <div class="container">
    <div class="hero-content" data-aos="fade-right" data-aos-delay="200">
      <div class="greeting">{t('hero.greeting')}</div>
      <h1><span class="highlight-text">{t('hero.name')}</span></h1>
      <!-- Elemento typewriter simple -->
      <h2 id="typewriter" class="typewriter" fetchpriority="high" importance="high">{t('hero.title')}</h2>
      <p data-aos="fade-up" data-aos-delay="400">
        {t('hero.subtitle')}
      </p>
      <div class="hero-buttons" data-aos="fade-up" data-aos-delay="600">
        <a href="#{lang === 'es' ? 'proyectos' : 'projects'}" class="btn" data-section="projects">{lang === 'es' ? 'Ver Proyectos' : 'See Projects'}</a>
        <a href="#{lang === 'es' ? 'contacto' : 'contact'}" class="btn btn-outline" data-section="contact">{lang === 'es' ? 'Contactar' : 'Contact'}</a>
      </div>
      <div class="code-snippet" id="code-snippet" fetchpriority="high" importance="high">
        <pre><code id="static-code" class="static-code">const developer = &#123;
  name: 'Ramón',
  skills: ['JavaScript', 'C#', 'Vue.js'],
  passion: {lang === 'es' ? "'Crear soluciones innovadoras'" : "'Creating innovative solutions'"},
  coffee: {lang === 'es' ? 'necesario: true' : 'required: true'}
&#125;;</code></pre>
      </div>
    </div>
    <div class="hero-image" data-aos="fade-left" data-aos-delay="400">
      <div class="image-container">
        <OptimizedImage
          src="/images/avatar.jpg"
          alt="Ramón - Foto de perfil"
          class="profile-image"
          priority={true}
          width={300}
          height={300}
          sizes="(max-width: 480px) 180px, (max-width: 768px) 240px, (max-width: 1200px) 300px, 600px"
        />
      </div>
      <div class="floating-elements">
        <div class="floating-element html">&lt;/&gt;</div>
        <div class="floating-element css">{}</div>
        <div class="floating-element js">()</div>
        <div class="floating-element react">&#9883;</div>
        <div class="floating-element csharp">C#</div>
        <div class="floating-element vue">V</div>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ lang }}>
  // Script simple para el efecto de typewriter
  document.addEventListener('DOMContentLoaded', function() {
    // Esperar a que el LCP se complete antes de iniciar el efecto
    setTimeout(function() {
      const typewriterElement = document.getElementById('typewriter');
      if (!typewriterElement) return;

      // Obtener el texto inicial
      const initialText = typewriterElement.textContent || '';

      // Configurar las frases para el efecto typewriter
      const phrases = lang === 'es' ? [
        initialText,
        "Desarrollador Frontend",
        "Desarrollador Backend",
        "Desarrollador Full Stack",
        "Creador de Soluciones Digitales",
      ] : [
        initialText,
        "Frontend Developer",
        "Backend Developer",
        "Full Stack Developer",
        "Digital Solutions Creator",
      ];

      // Variables para el efecto de máquina de escribir
      let currentPhraseIndex = 0;
      let currentCharIndex = phrases[0].length;
      let isDeleting = true;
      let typingSpeed = 100;

      // Función para animar el efecto de máquina de escribir
      function typeWriter() {
        const currentPhrase = phrases[currentPhraseIndex];

        if (isDeleting) {
          typewriterElement.textContent = currentPhrase.substring(0, currentCharIndex - 1);
          currentCharIndex--;
          typingSpeed = 50;
        } else {
          typewriterElement.textContent = currentPhrase.substring(0, currentCharIndex + 1);
          currentCharIndex++;
          typingSpeed = 100;
        }

        if (!isDeleting && currentCharIndex === currentPhrase.length) {
          isDeleting = true;
          typingSpeed = 1500; // Pausa antes de empezar a borrar
        } else if (isDeleting && currentCharIndex === 0) {
          isDeleting = false;
          currentPhraseIndex = (currentPhraseIndex + 1) % phrases.length;
          typingSpeed = 500; // Pausa antes de escribir la siguiente frase
        }

        setTimeout(typeWriter, typingSpeed);
      }

      // Iniciar el efecto de máquina de escribir
      setTimeout(typeWriter, 2000);
    }, 3000); // Esperar 3 segundos para asegurar que el LCP se haya completado
  });

  // Función para aplicar la animación de shimmer después del LCP
  window.addEventListener('load', function() {
    setTimeout(function() {
      const codeSnippet = document.getElementById('code-snippet');
      if (!codeSnippet) return;

      // Crear una animación de keyframes para el shimmer
      const shimmerAnimation = `
        @keyframes shimmer {
          100% {
            transform: translateX(100%);
          }
        }
      `;

      // Añadir la animación al documento
      const styleElement = document.createElement('style');
      styleElement.textContent = shimmerAnimation;
      document.head.appendChild(styleElement);

      // Aplicar la animación al pseudo-elemento after
      codeSnippet.style.setProperty('--shimmer-animation', 'shimmer 3s infinite');

      // Usar requestAnimationFrame para asegurar que la animación se aplique en el momento adecuado
      requestAnimationFrame(() => {
        const codeSnippetAfter = document.createElement('style');
        codeSnippetAfter.textContent = `
          #code-snippet::after {
            animation: var(--shimmer-animation, none);
          }
        `;
        document.head.appendChild(codeSnippetAfter);
      });
    }, 1500);
  });
</script>

<style>
  .hero {
    padding: 6rem 0 3rem;
    background: linear-gradient(
      135deg,
      var(--light-background) 0%,
      var(--background-color) 100%
    );
    position: relative;
    overflow: hidden;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Fondo con efecto de ola con gradiente - Más notorio */
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg,
      rgba(37, 99, 235, 0.15) 0%,
      rgba(30, 64, 175, 0.25) 25%,
      rgba(37, 99, 235, 0.15) 50%,
      rgba(30, 64, 175, 0.25) 75%,
      rgba(37, 99, 235, 0.15) 100%);
    background-size: 250% 100%;
    z-index: 1;
    opacity: 1;
    animation: wave-gradient 12s ease infinite;
  }

  @keyframes wave-gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Segunda capa de gradiente para efecto de profundidad - Más notorio */
  .hero::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg,
      rgba(30, 64, 175, 0.1) 0%,
      rgba(59, 130, 246, 0.18) 25%,
      rgba(30, 64, 175, 0.1) 50%,
      rgba(59, 130, 246, 0.18) 75%,
      rgba(30, 64, 175, 0.1) 100%);
    background-size: 400% 400%;
    z-index: 1;
    opacity: 0.8;
    animation: diagonal-wave 15s ease infinite;
  }

  @keyframes diagonal-wave {
    0% {
      background-position: 0% 0%;
    }
    25% {
      background-position: 50% 50%;
    }
    50% {
      background-position: 100% 100%;
    }
    75% {
      background-position: 50% 50%;
    }
    100% {
      background-position: 0% 0%;
    }
  }

  /* Fondo con gradiente para modo oscuro - Más notorio */
  html.dark .hero::before {
    background: linear-gradient(90deg,
      rgba(96, 165, 250, 0.4) 0%,
      rgba(59, 130, 246, 0.6) 25%,
      rgba(96, 165, 250, 0.4) 50%,
      rgba(59, 130, 246, 0.6) 75%,
      rgba(96, 165, 250, 0.4) 100%);
    opacity: 1;
  }

  html.dark .hero::after {
    background: linear-gradient(135deg,
      rgba(59, 130, 246, 0.35) 0%,
      rgba(96, 165, 250, 0.5) 25%,
      rgba(59, 130, 246, 0.35) 50%,
      rgba(96, 165, 250, 0.5) 75%,
      rgba(59, 130, 246, 0.35) 100%);
    opacity: 0.9;
  }

  .hero .container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: center;
    position: relative;
    z-index: 2;
    width: 100%;
    max-width: 1200px;
    position: relative;
  }

  /* Animación de partículas para la sección de nombre y foto */
  .hero .container::before {
    content: '';
    position: absolute;
    top: -50px;
    left: -50px;
    right: -50px;
    bottom: -50px;
    background:
      radial-gradient(circle at 10% 20%, rgba(59, 130, 246, 0.03) 0%, transparent 30%),
      radial-gradient(circle at 90% 80%, rgba(59, 130, 246, 0.03) 0%, transparent 30%),
      radial-gradient(circle at 50% 50%, rgba(59, 130, 246, 0.01) 0%, transparent 100%);
    z-index: -1;
    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
    animation: morphing 15s ease-in-out infinite alternate;
    opacity: 0.7;
  }

  @keyframes morphing {
    0% {
      border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
      transform: rotate(0deg) scale(1);
    }
    25% {
      border-radius: 40% 60% 60% 40% / 40% 40% 60% 60%;
    }
    50% {
      border-radius: 30% 70% 50% 50% / 50% 50% 70% 30%;
      transform: rotate(3deg) scale(1.02);
    }
    75% {
      border-radius: 50% 50% 40% 60% / 60% 40% 50% 50%;
    }
    100% {
      border-radius: 70% 30% 30% 70% / 70% 70% 30% 30%;
      transform: rotate(-3deg) scale(0.98);
    }
  }

  /* Versión para modo oscuro */
  html.dark .hero .container::before {
    background:
      radial-gradient(circle at 10% 20%, rgba(96, 165, 250, 0.05) 0%, transparent 35%),
      radial-gradient(circle at 90% 80%, rgba(96, 165, 250, 0.05) 0%, transparent 35%),
      radial-gradient(circle at 50% 50%, rgba(96, 165, 250, 0.02) 0%, transparent 100%);
    opacity: 0.5;
  }

  .hero-content {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
    padding: 1rem 0;
    position: relative;
  }

  /* Efecto de partículas para la sección de nombre */
  .hero-content::before {
    content: '';
    position: absolute;
    top: -20px;
    left: -20px;
    right: -20px;
    bottom: -20px;
    background-image:
      radial-gradient(circle at 20% 30%, rgba(59, 130, 246, 0.03) 0%, transparent 8px),
      radial-gradient(circle at 40% 70%, rgba(59, 130, 246, 0.03) 0%, transparent 6px),
      radial-gradient(circle at 60% 20%, rgba(59, 130, 246, 0.03) 0%, transparent 10px),
      radial-gradient(circle at 80% 50%, rgba(59, 130, 246, 0.03) 0%, transparent 8px),
      radial-gradient(circle at 10% 60%, rgba(59, 130, 246, 0.03) 0%, transparent 9px),
      radial-gradient(circle at 90% 90%, rgba(59, 130, 246, 0.03) 0%, transparent 7px);
    z-index: -1;
    opacity: 0.7;
    animation: particles-float 20s ease-in-out infinite alternate;
  }

  @keyframes particles-float {
    0% {
      background-position: 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%, 0% 0%;
    }
    100% {
      background-position: 20px 10px, -15px 20px, 10px -10px, -20px 15px, 15px -15px, -10px -10px;
    }
  }

  /* Versión para modo oscuro */
  html.dark .hero-content::before {
    background-image:
      radial-gradient(circle at 20% 30%, rgba(96, 165, 250, 0.05) 0%, transparent 8px),
      radial-gradient(circle at 40% 70%, rgba(96, 165, 250, 0.05) 0%, transparent 6px),
      radial-gradient(circle at 60% 20%, rgba(96, 165, 250, 0.05) 0%, transparent 10px),
      radial-gradient(circle at 80% 50%, rgba(96, 165, 250, 0.05) 0%, transparent 8px),
      radial-gradient(circle at 10% 60%, rgba(96, 165, 250, 0.05) 0%, transparent 9px),
      radial-gradient(circle at 90% 90%, rgba(96, 165, 250, 0.05) 0%, transparent 7px);
    opacity: 0.5;
  }

  .greeting {
    font-size: 1.2rem;
    color: var(--text-color);
    margin-bottom: 0.75rem;
    font-weight: 500;
  }

  .hero h1 {
    font-size: 4rem;
    font-weight: 800;
    margin-bottom: 0.75rem;
    line-height: 1.1;
    letter-spacing: -0.02em;
  }

  .hero h2 {
    font-size: 2rem;
    color: var(--primary-color);
    margin-bottom: 1.25rem;
    min-height: 2.5rem; /* Para evitar saltos durante la animación de escritura */
    position: relative;
  }

  /* Estilo para el typewriter */
  .typewriter {
    display: inline-block;
    font-weight: 700;
    position: relative;
    color: var(--primary-color);
    font-size: 2rem;
    margin-bottom: 1rem;
    min-height: 2.5rem;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.2;
    letter-spacing: -0.025em;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    will-change: auto;
    contain: content;
  }

  /* Modo oscuro para el typewriter */
  html.dark .typewriter {
    color: var(--primary-color);
  }

  /* Cursor parpadeante */
  .typewriter::after {
    content: '|';
    position: absolute;
    right: -10px;
    top: 0;
    color: var(--primary-color);
    animation: blink 0.8s step-end infinite;
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }

  .hero p {
    font-size: 1.1rem;
    color: var(--text-color);
    margin-bottom: 1.75rem;
    max-width: 520px;
    line-height: 1.7;
    font-weight: 400;
  }

  .hero-buttons {
    display: flex;
    gap: 1.25rem;
    margin-top: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .code-snippet {
    background-color: #1f2937; /* Color hardcodeado para evitar variables CSS */
    border-radius: 8px;
    padding: 1rem;
    max-width: 400px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    position: relative;
    font-size: 0.95rem;
    line-height: 1.4;
    will-change: auto; /* Optimizar para renderizado */
    contain: content; /* Mejorar rendimiento de renderizado */
  }

  /* Estilos para el código estático */
  .static-code {
    display: block;
    line-height: 1.5;
    color: #e5e7eb; /* Color hardcodeado para evitar variables CSS */
    font-family: "Consolas", "Monaco", monospace;
  }

  /* Modo oscuro para el código estático */
  html.dark .static-code {
    color: #f3f4f6; /* Color más claro para modo oscuro */
  }

  /* Efecto de shimmer aplicado después del LCP */
  #code-snippet::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(59, 130, 246, 0.1),
      transparent
    );
    transform: translateX(-100%);
    pointer-events: none;
  }

  /* La animación se aplicará mediante JavaScript después del LCP */

  .code-snippet pre {
    margin: 0;
    font-size: 0.9rem;
  }

  .hero-image {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
  }

  .image-container {
    position: relative;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    overflow: hidden;
    box-shadow: 0 15px 35px rgba(59, 130, 246, 0.2);
    background-color: var(--light-background);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    animation: float 6s ease-in-out infinite;
    border: 4px solid var(--card-background);
    transition:
      box-shadow 0.5s ease,
      transform 0.5s ease;
  }

  /* Efecto de brillo alrededor de la imagen */
  .image-container::before {
    content: '';
    position: absolute;
    top: -5px;
    left: -5px;
    right: -5px;
    bottom: -5px;
    background: linear-gradient(45deg,
      rgba(59, 130, 246, 0.1),
      rgba(59, 130, 246, 0),
      rgba(59, 130, 246, 0.1),
      rgba(59, 130, 246, 0));
    border-radius: 50%;
    z-index: -1;
    animation: rotate-glow 8s linear infinite;
  }

  @keyframes rotate-glow {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Versión para modo oscuro */
  html.dark .image-container::before {
    background: linear-gradient(45deg,
      rgba(96, 165, 250, 0.15),
      rgba(96, 165, 250, 0),
      rgba(96, 165, 250, 0.15),
      rgba(96, 165, 250, 0));
  }

  .image-container:hover {
    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.3);
  }

  @keyframes float {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-20px);
    }
  }

  .profile-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    border-radius: 50%;
    transition: transform 0.5s ease;
  }

  .image-container:hover .profile-image {
    transform: scale(1.05);
  }

  .floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  .floating-element {
    position: absolute;
    font-size: 1.5rem;
    font-weight: bold;
    padding: 0.5rem;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    animation-duration: 6s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
  }

  .html {
    background-color: #e34c26;
    color: white;
    top: 20%;
    left: 0%;
    animation-name: float-1;
  }

  .css {
    background-color: #264de4;
    color: white;
    top: 70%;
    left: 10%;
    animation-name: float-2;
  }

  .js {
    background-color: #f7df1e;
    color: black;
    top: 40%;
    right: 10%;
    animation-name: float-3;
  }

  .react {
    background-color: #61dafb;
    color: black;
    top: 10%;
    right: 0%;
    animation-name: float-4;
  }

  .csharp {
    background-color: #6a1577;
    color: white;
    bottom: 15%;
    right: 15%;
    animation-name: float-5;
  }

  .vue {
    background-color: #42b883;
    color: #35495e;
    bottom: 30%;
    left: 20%;
    animation-name: float-6;
    font-weight: 900;
    font-family: 'Arial', sans-serif;
    font-style: italic;
    padding: 0.4rem 0.7rem;
  }

  @keyframes float-1 {
    0%,
    100% {
      transform: translate(0, 0);
    }
    50% {
      transform: translate(20px, 20px);
    }
  }

  @keyframes float-2 {
    0%,
    100% {
      transform: translate(0, 0);
    }
    50% {
      transform: translate(-20px, -10px);
    }
  }

  @keyframes float-3 {
    0%,
    100% {
      transform: translate(0, 0);
    }
    50% {
      transform: translate(-15px, 15px);
    }
  }

  @keyframes float-4 {
    0%,
    100% {
      transform: translate(0, 0);
    }
    50% {
      transform: translate(15px, -15px);
    }
  }

  @keyframes float-5 {
    0%,
    100% {
      transform: translate(0, 0) rotate(0deg);
    }
    50% {
      transform: translate(-10px, 10px) rotate(10deg);
    }
  }

  @keyframes float-6 {
    0%,
    100% {
      transform: translate(0, 0) scale(1);
    }
    50% {
      transform: translate(15px, -5px) scale(1.1);
    }
  }

  @media (max-width: 768px) {
    .hero {
      padding: 5rem 0 2rem;
      min-height: calc(100vh - 70px); /* Ajustar para la altura del header */
      display: flex;
      align-items: center;
    }

    .hero .container {
      grid-template-columns: 1fr;
      text-align: center;
      gap: 1rem;
    }

    /* Ajustar animaciones de ola para móviles */
    .hero::before {
      background-size: 200% 100%;
      animation-duration: 10s;
    }

    .hero::after {
      background-size: 300% 300%;
      animation-duration: 12s;
      opacity: 0.5;
    }

    /* Ajustes especiales para modo oscuro en móviles */
    html.dark .hero::before {
      background-size: 200% 100%;
      animation-duration: 8s;
    }

    html.dark .hero::after {
      background-size: 300% 300%;
      animation-duration: 10s;
    }

    /* Ajustar animaciones para móviles */
    .hero .container::before {
      top: -20px;
      left: -20px;
      right: -20px;
      bottom: -20px;
      opacity: 0.5;
    }

    .hero-content::before {
      opacity: 0.4;
      animation-duration: 15s;
    }

    .hero-content {
      order: 2;
    }

    .hero-image {
      order: 1;
      margin-bottom: 1rem;
    }

    .hero h1 {
      font-size: 2.5rem;
    }

    .hero h2 {
      font-size: 1.3rem;
      min-height: 2rem;
    }

    .hero p {
      font-size: 0.9rem;
      margin: 0 auto 1rem;
      line-height: 1.5;
    }

    .hero-buttons {
      justify-content: center;
      margin-top: 0.5rem;
      margin-bottom: 1rem;
    }

    .code-snippet {
      margin: 0 auto;
      font-size: 0.8rem;
      padding: 0.75rem;
      max-width: 300px;
    }

    .code-snippet pre {
      font-size: 0.8rem;
    }

    .image-container {
      width: 180px;
      height: 180px;
      border-width: 3px;
      margin: 0 auto;
    }

    .floating-element {
      font-size: 1.2rem;
      padding: 0.4rem;
    }
  }

  @media (max-width: 480px) {
    .hero {
      padding: 3rem 0 1rem;
      min-height: 100vh;
      justify-content: center;
    }

    .hero .container {
      gap: 0.5rem;
      width: 100%;
      padding: 0 1rem;
    }

    .hero h1 {
      font-size: 1.8rem;
      margin-bottom: 0.2rem;
    }

    .hero h2 {
      font-size: 1rem;
      min-height: 1.5rem;
      margin-bottom: 0.5rem;
    }

    .hero p {
      font-size: 0.8rem;
      margin-bottom: 0.5rem;
      line-height: 1.4;
    }

    .image-container {
      width: 120px;
      height: 120px;
      border-width: 2px;
    }

    .code-snippet {
      max-width: 100%;
      padding: 0.5rem;
      margin-top: 0.5rem;
      font-size: 0.7rem;
    }

    .code-snippet pre {
      font-size: 0.65rem;
    }

    .hero-buttons {
      flex-direction: column;
      gap: 0.5rem;
      align-items: center;
      margin-top: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .hero-buttons .btn {
      width: 100%;
      padding: 0.5rem 0.8rem;
      font-size: 0.8rem;
    }

    .floating-elements {
      /* Mantener los elementos flotantes pero hacerlos más pequeños */
      transform: scale(0.7);
    }

    .floating-element {
      font-size: 1rem;
      padding: 0.3rem;
    }

    .greeting {
      font-size: 1rem;
      margin-bottom: 0.2rem;
    }
  }

  /* Ajustes específicos para dispositivos muy pequeños */
  @media (max-width: 360px) {
    .hero {
      padding: 2rem 0 0.5rem;
    }

    .hero h1 {
      font-size: 1.6rem;
    }

    .hero h2 {
      font-size: 0.9rem;
    }

    .hero p {
      font-size: 0.75rem;
    }

    .image-container {
      width: 100px;
      height: 100px;
    }
    .floating-elements {
      transform: scale(0.6);
    }

    .floating-element {
      font-size: 0.9rem;
      padding: 0.25rem;
    }
  }
</style>
