---
// Componente para imágenes optimizadas con soporte WebP, responsive y fallback
interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  sizes?: string;
  priority?: boolean;
}

const {
  src,
  alt,
  class: className,
  width: propWidth,
  height: propHeight,
  sizes = '(max-width: 768px) 100vw, 800px',
  priority = false
} = Astro.props;

// Determinar la ruta de la imagen WebP
const srcPath = src.startsWith('/') ? src : `/${src}`;
const extension = srcPath.substring(srcPath.lastIndexOf('.'));
const basePath = srcPath.substring(0, srcPath.lastIndexOf('.'));
const fileName = basePath.substring(basePath.lastIndexOf('/') + 1);

// Rutas para imágenes responsive
const responsiveImages = {
  small: `/images/responsive/${fileName}-small.webp`,
  medium: `/images/responsive/${fileName}-medium.webp`,
  large: `/images/responsive/${fileName}-large.webp`
};

// Rutas para imágenes de alta resolución (2x)
const highResImages = {
  small: `/images/responsive/${fileName}-small-2x.webp`,
  medium: `/images/responsive/${fileName}-medium-2x.webp`,
  large: `/images/responsive/${fileName}-large-2x.webp`
};

// Verificar si existen versiones de alta resolución
const hasHighRes = fileName === 'avatar'; // Por ahora solo el avatar tiene versiones 2x

// Determinar dimensiones de la imagen según el tipo
let width = propWidth;
let height = propHeight;
let aspectRatio;

// Dimensiones predeterminadas para tipos comunes de imágenes
if (!width || !height) {
  if (fileName === 'avatar') {
    // Dimensiones más grandes para el avatar para evitar baja resolución
    width = 300;
    height = 300;
    aspectRatio = '1/1';
  } else if (fileName.includes('preview')) {
    width = 800;
    height = 450;
    aspectRatio = '16/9';
  } else {
    width = 800;
    aspectRatio = 'auto';
  }
}

// Determinar si la imagen es local (para aplicar WebP y responsive)
const isLocalImage = !src.startsWith('http');

// Generar srcset para imágenes responsive
let srcset = '';

if (isLocalImage) {
  if (hasHighRes) {
    // Incluir versiones de alta resolución para dispositivos con pantallas de alta densidad
    srcset = `${responsiveImages.small} 400w,
              ${highResImages.small} 400w 2x,
              ${responsiveImages.medium} 800w,
              ${highResImages.medium} 800w 2x,
              ${responsiveImages.large} 1200w,
              ${highResImages.large} 1200w 2x`;
  } else {
    // Versiones estándar para imágenes normales
    srcset = `${responsiveImages.small} 400w,
              ${responsiveImages.medium} 800w,
              ${responsiveImages.large} 1200w`;
  }
}

// Fallback a WebP original si no hay versiones responsive
const webpSrc = `/images/webp${basePath.substring(basePath.lastIndexOf('/'))}.webp`;

// Determinar atributos de carga
const loadingAttr = priority ? 'eager' : 'lazy';
const fetchPriority = priority ? 'high' : 'auto';
---

{isLocalImage ? (
  <picture>
    {/* Versiones responsive WebP */}
    <source
      srcset={srcset}
      sizes={sizes}
      type="image/webp"
    />

    {/* Fallback a WebP original */}
    <source
      srcset={webpSrc}
      type="image/webp"
    />

    {/* Fallback a imagen original */}
    <source
      srcset={srcPath}
      type={`image/${extension.substring(1)}`}
    />

    <img
      src={srcPath}
      alt={alt}
      class={className}
      width={width}
      height={height}
      loading={loadingAttr}
      fetchpriority={fetchPriority}
      decoding={priority ? 'sync' : 'async'}
      style={`aspect-ratio: ${aspectRatio};`}
    />
  </picture>
) : (
  <img
    src={src}
    alt={alt}
    class={className}
    width={width}
    height={height}
    loading={loadingAttr}
    fetchpriority={fetchPriority}
    decoding={priority ? 'sync' : 'async'}
  />
)}
